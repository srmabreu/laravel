version: '2.3'

services:

  app:
    build: .
    container_name: app
    ports:
      - "9000:9000"
    volumes:
      - .:/var/www
    networks:
      - app-network
    depends_on:
      mysql:
        condition: service_healthy

  nginx:
    build: .docker/nginx
    container_name: nginx
    entrypoint: dockerize -template /etc/nginx/conf.d/nginx.tmpl:/etc/nginx/conf.d/nginx.conf -wait tcp://app:9000 nginx -g 'daemon off;'
    environment:
      - APP_HOST=app
      - APP_PORT=9000
    restart: always
    tty: true
    ports:
      - "8000:80"
    volumes:
      - .:/var/www
    networks:
      - app-network
    depends_on:
      - app
  
  redis:
    image: redis:alpine
    expose:
      - 6379
    networks:
      - app-network
  
  mysql:
    image: mysql:5.7
    command: --innodb-use-native-aio=0
    container_name: db
    restart: always
    tty: true
    ports:
      - "3306:3306"
    volumes:
      - ./.docker/dbdata:/var/lib/mysql
    environment:
      - MYSQL_DATABASE=laravel
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=root
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "mysql -uroot --database=laravel --password=root --execute='SELECT count(table_name) > 0 FROM information_schema.tables;' --skip-column-names -B"]
      interval: 30s
      timeout: 30s
      retries: 4

networks:
  app-network:
    driver: bridge